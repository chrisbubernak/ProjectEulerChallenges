# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

# Triangle	 Tn=n(n+1)/2  1, 3, 6, 10, 15, ...
# Pentagonal Pn=n(3n-1)/2 1, 5, 12, 22, 35, ...
# Hexagonal  Hn=n(2n-1)   1, 6, 15, 28, 25, ...
# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.

# sets for quick look ups
tSet = {1}
pSet = {1}
hSet = {1}

# arrays so we know which we've calculated
triangles = [1]
pentagonals = [1]
hexagonals = [1]

# generate a triangle number
def triangle(n):
  return n*(n+1)/2

# generates a pentagonal number
def pentagonal(n):
  return n*(3*n-1)/2

# generates a hexagonal nubmer
def hexagonal(n):
    return n*(2*n-1)

# checks if a number is a triangle
def isTriangle(t):
  # if t > than the biggest thing in our array we need to generate
  # some more triangles
  while(t > triangles[len(triangles) - 1]):
    nextN = len(triangles) + 1
    nextT = triangle(nextN)
    # for each new one add it to the set (for quick checks)
    tSet.add(nextT)
    # add the new one to the list 
    triangles.append(nextT)

  return t in tSet

# checks if a number is a pentagonal
def isPentagonal(p):
  # if p > than the biggest thing in our array we need to generate
  # some more pentagonals
  while(p > pentagonals[len(pentagonals) - 1]):
    nextN = len(pentagonals) + 1
    nextP = pentagonal(nextN)
    # for each new one add it to the set (for quick checks)
    pSet.add(nextP)
    # add the new one to the list 
    pentagonals.append(nextP)

  return p in pSet

# checks if a number is a hexagonal
def isHexagonal(h):
  # if h > than the biggest thing in our array we need to generate
  # some more hexagonals
  while(h > hexagonals[len(hexagonals) - 1]):
    nextN = len(hexagonals) + 1
    nextH = hexagonal(nextN)
    # for each new one add it to the set (for quick checks)
    hSet.add(nextH)
    # add the new one to the list 
    hexagonals.append(nextH)

  return h in hSet

def solve():
    t = 0
    # start at 2 so we skip 1 which they all are
    n = 2

    p = False
    h = False

    while(not(p and h and not(t == 40755))):
      t = triangle(n)
      p = isPentagonal(t)
      h = isHexagonal(t)
      n = n + 1
    return t

print(solve())
